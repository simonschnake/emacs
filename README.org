#+TITLE: Emacs Configuration
#+AUTHOR: Simon



* GUI

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)

  ;; use dark theme for dark terminal for visible colours
  (if (display-graphic-p)
      (use-package doom-themes
        :ensure t
        :config
        (progn
          (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                doom-themes-enable-italic t) ; if nil, italics is universally disabled
          (load-theme 'doom-one-light t)
          (doom-themes-visual-bell-config)
          (doom-themes-visual-bell-config)
          (doom-themes-visual-bell-config)))
    (use-package ample-theme
      :init (progn (load-theme 'ample t t)
                   (load-theme 'ample-flat t t)
                   (load-theme 'ample-light t t)
                   (enable-theme 'ample-flat))
      :defer t
      :ensure t))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Powerline theme
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; powerline theme where the modes are on the right side.
  (use-package powerline
    :ensure t
    :config
    (defun powerline-right-theme ()
      "Setup a mode-line with major and minor modes on the right side."
      (interactive)
      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((active (powerline-selected-window-active))
                              (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
                              (mode-line (if active 'mode-line 'mode-line-inactive))
                              (face0 (if active 'powerline-active0 'powerline-inactive0))
                              (face1 (if active 'powerline-active1 'powerline-inactive1))
                              (face2 (if active 'powerline-active2 'powerline-inactive2))
                              (separator-left (intern (format "powerline-%s-%s"
                                                              (powerline-current-separator)
                                                              (car powerline-default-separator-dir))))
                              (separator-right (intern (format "powerline-%s-%s"
                                                               (powerline-current-separator)
                                                               (cdr powerline-default-separator-dir))))
                              (lhs (list (powerline-raw "%*" face0 'l)
                                         (powerline-buffer-size face0 'l)
                                         (powerline-buffer-id `(mode-line-buffer-id ,face0) 'l)
                                         (powerline-raw " ")
                                         (funcall separator-left face0 face1)
                                         (powerline-narrow face1 'l)
                                         (powerline-vc face1)))
                              (center (list (powerline-raw global-mode-string face1 'r)
                                            (powerline-raw "%4l" face1 'r)
                                            (powerline-raw ":" face1)
                                            (powerline-raw "%3c" face1 'r)
                                            (funcall separator-right face1 face0)
                                            (powerline-raw " ")
                                            (powerline-raw "%6p" face0 'r)
                                            (powerline-hud face2 face1)
                                            ))
                              (rhs (list (powerline-raw " " face1)
                                         (funcall separator-left face1 face2)
                                         (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                           (powerline-raw erc-modified-channels-object face2 'l))
                                         (powerline-major-mode face2 'l)
                                         (powerline-process face2)
                                         (powerline-raw " :" face2)
                                         (powerline-minor-modes face2 'l)
                                         (powerline-raw " " face2)
                                         (funcall separator-right face2 face1)
                                         ))
                              )
                         (concat (powerline-render lhs)
                                 (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                                 (powerline-render center)
                                 (powerline-fill face1 (powerline-width rhs))
                                 (powerline-render rhs)))))))
    (powerline-right-theme)
    )

#+END_SRC

* General Config
  
Sane defaults
 #+BEGIN_SRC emacs-lisp

   ;; turn of startup message
   (setq inhibit-startup-message t)
   ;; turn on highlight matching brackets when cursor is on one
   (show-paren-mode t)
   ;; Overwrite region selected
   (delete-selection-mode t)
   ;; Show column numbers by default
   (setq column-number-mode t)
   ;; Prevent emacs from creating a bckup file filename~
   (setq make-backup-files nil)
   ;; Settings for searching
   (setq-default case-fold-search t ;case insensitive searches by default
                 search-highlight t) ;hilit matches when searching
   ;; Highlight the line we are currently on
   (global-hl-line-mode t)

   ;; We don't want to type yes and no all the time so, do y and n
   (defalias 'yes-or-no-p 'y-or-n-p)
   ;; Disable the horrid auto-save
   (setq auto-save-default nil)

   ;; Don't ring the bell
   (setq ring-bell-function 'ignore)

#+END_SRC


* Org-mode

#+BEGIN_SRC emacs-lisp

#+END_SRC
