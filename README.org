#+TITLE: Emacs Configuration
#+AUTHOR: Simon


* GUI

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)

  ;; use dark theme for dark terminal for visible colours
  (if (display-graphic-p)
      (use-package doom-themes
        :ensure t
        :config
        (progn
          (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                doom-themes-enable-italic t) ; if nil, italics is universally disabled
          (load-theme 'doom-one-light t)
          (doom-themes-visual-bell-config)
          (doom-themes-visual-bell-config)
          (doom-themes-visual-bell-config)))
    (use-package ample-theme
      :init (progn (load-theme 'ample t t)
                   (load-theme 'ample-flat t t)
                   (load-theme 'ample-light t t)
                   (enable-theme 'ample-flat))
      :defer t
      :ensure t))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Powerline theme
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; powerline theme where the modes are on the right side.
  (use-package powerline
    :ensure t
    :config
    (defun powerline-right-theme ()
      "Setup a mode-line with major and minor modes on the right side."
      (interactive)
      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((active (powerline-selected-window-active))
                              (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
                              (mode-line (if active 'mode-line 'mode-line-inactive))
                              (face0 (if active 'powerline-active0 'powerline-inactive0))
                              (face1 (if active 'powerline-active1 'powerline-inactive1))
                              (face2 (if active 'powerline-active2 'powerline-inactive2))
                              (separator-left (intern (format "powerline-%s-%s"
                                                              (powerline-current-separator)
                                                              (car powerline-default-separator-dir))))
                              (separator-right (intern (format "powerline-%s-%s"
                                                               (powerline-current-separator)
                                                               (cdr powerline-default-separator-dir))))
                              (lhs (list (powerline-raw "%*" face0 'l)
                                         (powerline-buffer-size face0 'l)
                                         (powerline-buffer-id `(mode-line-buffer-id ,face0) 'l)
                                         (powerline-raw " ")
                                         (funcall separator-left face0 face1)
                                         (powerline-narrow face1 'l)
                                         (powerline-vc face1)))
                              (center (list (powerline-raw global-mode-string face1 'r)
                                            (powerline-raw "%4l" face1 'r)
                                            (powerline-raw ":" face1)
                                            (powerline-raw "%3c" face1 'r)
                                            (funcall separator-right face1 face0)
                                            (powerline-raw " ")
                                            (powerline-raw "%6p" face0 'r)
                                            (powerline-hud face2 face1)
                                            ))
                              (rhs (list (powerline-raw " " face1)
                                         (funcall separator-left face1 face2)
                                         (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                           (powerline-raw erc-modified-channels-object face2 'l))
                                         (powerline-major-mode face2 'l)
                                         (powerline-process face2)
                                         (powerline-raw " :" face2)
                                         (powerline-minor-modes face2 'l)
                                         (powerline-raw " " face2)
                                         (funcall separator-right face2 face1)
                                         ))
                              )
                         (concat (powerline-render lhs)
                                 (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                                 (powerline-render center)
                                 (powerline-fill face1 (powerline-width rhs))
                                 (powerline-render rhs)))))))
    (powerline-right-theme)
    )

#+END_SRC

* General Config
  
Sane defaults
 #+BEGIN_SRC emacs-lisp

   ;; turn of startup message
   (setq inhibit-startup-message t)
   ;; turn on highlight matching brackets when cursor is on one
   (show-paren-mode t)
   ;; Overwrite region selected
   (delete-selection-mode t)
   ;; Show column numbers by default
   (setq column-number-mode t)
   ;; Prevent emacs from creating a bckup file filename~
   (setq make-backup-files nil)
   ;; Settings for searching
   (setq-default case-fold-search t ;case insensitive searches by default
                 search-highlight t) ;hilit matches when searching
   ;; Highlight the line we are currently on
   (global-hl-line-mode t)

   ;; We don't want to type yes and no all the time so, do y and n
   (defalias 'yes-or-no-p 'y-or-n-p)
   ;; Disable the horrid auto-save
   (setq auto-save-default nil)

   ;; Don't ring the bell
   (setq ring-bell-function 'ignore)

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Non-nil means draw block cursor as wide as the glyph under it.
;; For example, if a block cursor is over a tab, it will be drawn as
;; wide as that tab on the display.
(setq x-stretch-cursor t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Enable terminal emacs to copy and paste from system clipboard
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Note: this uses C-c before the usual C-w, M-w, and C-ya
;; From: https://stackoverflow.com/questions/64360/how-to-copy-text-from-emacs-to-another-application-on-linux
;; you need to install xsel (sudo apt install xsel)
(defun my-copy-to-xclipboard(arg)a
  (interactive "P")
  (cond
   ((not (use-region-p))
    (message "Nothing to yank to X-clipboard"))
   ((and (not (display-graphic-p))
         (/= 0 (shell-command-on-region
                (region-beginning) (region-end) "xsel -i -b")))
    (message "Error: Is program `xsel' installed?"))
   (t
    (when (display-graphic-p)
      (call-interactively 'clipboard-kill-ring-save))
    (message "Yanked region to X-clipboard")
    (when arg
      (kill-region  (region-beginning) (region-end)))
    (deactivate-mark))))

(defun my-cut-to-xclipboard()
  (interactive)
  (my-copy-to-xclipboard t))

(defun my-paste-from-xclipboard()
  (interactive)
  (if (display-graphic-p)
      (clipboard-yank)
    (insert (shell-command-to-string "xsel -o -b"))))

(global-set-key (kbd "C-c C-w") 'my-cut-to-xclipboard)
(global-set-key (kbd "C-c M-w") 'my-copy-to-xclipboard)
(global-set-key (kbd "C-c C-y") 'my-paste-from-xclipboard)

                                        ; undo tree
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))


;; use avy to move fast inside a file

(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
; flashes the cursor's line when you scroll
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
; (setq beacon-color "#666600")
  )

; deletes all the whitespace when you hit backspace or delete
(use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))


(use-package multiple-cursors
  :ensure t)

;origami folding
(use-package origami
  :ensure t)

(use-package windmove
  :ensure t
  :bind (("S-<left>" . windmove-left)
         ("S-<right>" . windmove-right)
         ("S-<up>" . windmove-up)
         ("S-<down>" . windmove-down)
         )
  )

(use-package multi-term
  :ensure t
  
  :bind (("C-x m" . multi-term-next)
	 ("C-x M" . multi-term))
  :config '(setq multi-term-program "/bin/zsh"))

;; Dict.cc in Emacs
(use-package dictcc
  :commands dictcc
  :bind (("C-x RET ," . dictcc)
	 ("C-x RET ." . dictcc-at-point))
  :custom
  (dictcc-source-lang "de")
  (dictcc-destination-lang "en")
  (dictcc-completion-backend 'ivy))

;; Automatically at closing brace, bracket and quote
(use-package autopair
  :ensure t
  :config
  (autopair-global-mode t)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Flyspell Mode for Spelling Corrections
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package flyspell
  :ensure t
  :init
  (setq flyspell-issue-welcome-flag nil)
  :config
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word."
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word))

  (global-set-key (kbd "<f7>") 'flyspell-buffer)
  (global-set-key (kbd "<f8>") 'flyspell-correct-previous)
  (global-set-key (kbd "<f9>") 'flyspell-correct-previous)

  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)
  )
(use-package flyspell-correct-ivy
  :ensure t
  :after flyspell)

(use-package which-key
:ensure t
:config (which-key-mode))

(use-package rainbow-mode
:ensure t)

(use-package epresent :ensure t)

#+END_SRC


* PDF-Tools
some tweaks from http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/

| C-s        | search file     |
| h          | annot-highlight |
| t          | annot-text      |
| D          | annot-delet     |
| <return>   | annot-commit    |
| <S-return> | annot-newline   |

#+BEGIN_SRC emacs-lisp
  ;; wrapper for save-buffer ignoring arguments
  (defun sim/save-buffer-no-args ()
    "Save buffer ignoring arguments"
    (save-buffer))

  (use-package pdf-tools
    :ensure t
    :config
    ;; initialise
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; use isearch instead of swiper
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    ;; turn off cua so copy works
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    ;; more fine-grained zooming
    (setq pdf-view-resize-factor 1.1)
    ;; keyboard shortcuts
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
    ;; wait until map is available
    (with-eval-after-load "pdf-annot"
      (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<return>") 'pdf-annot-edit-contents-commit)
      (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<S-return>") 'newline)
      ;; save after adding comment
      (advice-add 'pdf-annot-edit-contents-commit :after 'sim/save-buffer-no-args)))
#+END_SRC


* Latex


#+BEGIN_SRC emacs-lisp
(use-package company-auctex
:ensure t  
:defer t
  :init
  (add-hook 'LaTeX-mode-hook 'company-auctex-init))

(use-package tex
  :defer t
  :init
  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-syntactic-comment t
        TeX-PDF-mode t
        ;; Synctex support
        TeX-source-correlate-mode t
        TeX-source-correlate-start-server nil
        ;; Setup reftex style (RefTeX is supported through extension)
        reftex-use-fonts t
        ;; Don't insert line-break at inline math
        LaTeX-fill-break-at-separators nil)
  (defvar latex-nofill-env '("equation"
                             "equation*"
                             "align"
                             "align*"
                             "tabular"
                             "tikzpicture")
    "List of environment names in which `auto-fill-mode' will be inhibited.")
  (add-hook 'LaTeX-mode-hook 'latex/auto-fill-mode)
  (add-hook 'LaTeX-mode-hook 'latex-math-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)

  :config
  ;; (defun my/latex-mode-defaults ()
  ;;   (visual-line-mode +1)
  ;;   (yas-minor-mode -1))

  (defun latex//autofill ()
    "Check whether the pointer is ucrrently inside on the
environments described in `latex-nofill-env' and if so, inhibits
the automatic filling of the current paragraph."
    (let ((do-auto-fill t)
          (current-environment "")
          (level 0))
      (while (and do-auto-fill (not (string= current-environment "document")))
        (setq level (1+ level)
              current-environment (LaTeX-current-environment level)
              do-auto-fill (not (member current-environment latex-nofill-env))))
      (when do-auto-fill
        (do-auto-fill))))

  (defun latex/auto-fill-mode ()
    "Toggle uato-fill-mode using the custom auto-fill function."
    (interactive)
    (auto-fill-mode)
    (setq auto-fill-function 'latex//autofill))

  ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
  ;; (add-to-list 'auto-mode-alist '("\\.l[gh]s\\'" . tex-mode))

  (when (eq system-type 'darwin)
    (setq TeX-view-program-selection
          '((output-dvi "DVI Viewer")
            (output-pdf "PDF Viewer")
            (output-html "HTML Viewer")))

    (setq TeX-view-program-list
          '(("DVI Viewer" "open %o")
            ("PDF Viewer" "open %o")
            ("HTML Viewer" "open %o")))))

#+END_SRC



* Org-mode
General org-mode configuration

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)

(define-key org-mode-map (kbd "C-c C-.") 'org-time-stamp-inactive)

(setq org-modules (cons 'org-habit org-modules))

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(custom-set-variables
 '(org-directory "~/org")
 '(org-mobile-directory "~/org")
 '(org-default-notes-file (concat org-directory "/notes.org"))
 '(org-export-html-postamble nil)
 '(org-hide-leading-stars t)
 '(org-startup-folded (quote overview))
 '(org-startup-indented t)
 )


(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((agenda "")
          (alltodo "")))))

(setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))))

(defadvice org-capture-finalize 
    (after delete-capture-frame activate)  
  "Advise capture-finalize to close the frame."  
  (if (equal "capture" (frame-parameter nil 'name))  
      (delete-frame)))

(defadvice org-capture-destroy 
    (after delete-capture-frame activate)  
  "Advise capture-destroy to close the frame."  
  (if (equal "capture" (frame-parameter nil 'name))  
      (delete-frame)))  

(use-package noflet
  :ensure t )
(defun make-capture-frame ()
  "Create a new frame and run 'org-capture'."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
    (org-capture)))


(use-package org-download 
  :ensure t
  :after org
  :config
  (setq-default org-download-heading-lvl nil)
   ;;; to get rid of the #+DOWNLOADED part
  (setq-default org-download-image-dir "~/org/img/")
  (setq org-download-annotate-function (lambda (_) ""))
  (setq org-download-method 'attach)
  )

  ;; to make notes to pdf using org-mode
(use-package org-noter
  :ensure t
  :config
  (setq-default org-noter-default-notes-file-names '("~/org/notes.org")
                org-noter-hide-other t
		org-noter))

;(use-package org-babel)


(use-package org-habit)

(use-package ob-python)

(use-package ob-ipython
:ensure t
  :config
  ;; for now I am disabling elpy only ob-ipython minor mode
  ;; what we should actually do, is just to ensure that
  ;; ob-ipython's company backend comes before elpy's (TODO)
  (add-hook 'ob-ipython-mode-hookp
            (lambda ()
              (elpy-mode 0)
              (company-mode 1)))
;  (add-to-list 'company-backends 'company-ob-ipython)
  (add-to-list 'org-latex-minted-langs '(ipython "python")))

;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (ipython . t)
   (emacs-lisp . t)
   (C . t)))

#+END_SRC

** GTD in org-mode

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/gtd/inbox.org"
                           "~/gtd/gtd.org"
                           "~/gtd/tickler.org"))


  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/gtd/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/gtd/tickler.org" "Tickler")
                                 "* %i%? \n %U")
                                  ("n" "Note" entry (file "~/org/notes.org")
                                   "* %?\n%u")))
  ;; C-c C-w = org-refile
  (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
                             ("~/gtd/someday.org" :level . 1)
                             ("~/gtd/tickler.org" :maxlevel . 2)))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC


* Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (require 'ivy)
  (ivy-mode t)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-wrap t)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  ;; Show #/total when scrolling buffers
  (setq ivy-count-format "%d/%d ")
  )

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
         ("C-r" . swiper))
  )
#+END_SRC


* Programming

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :disabled
    :init
    (with-eval-after-load 'python
      (elpy-enable)
      (elpy-use-ipython)
      (delete 'elpy-module-highlight-indentation elpy-modules)))

  ;; Snippets
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init (yas-global-mode t))

  ;; Autocomplete
  (use-package company
    :ensure t
    :defer 10
    :diminish company-mode
    :bind (:map company-active-map
                ("M-j" . company-select-next)
                ("M-k" . company-select-previous))
    :preface
    ;; enable yasnippet everywhere
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
      (if (or 
           (not company-mode/enable-yas) 
           (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    :init (global-company-mode t)
    :config
    ;; no delay no autocomplete
    (setq
     company-idle-delay 0
     company-minimum-prefix-length 2
     company-tooltip-limit 20)

    (setq company-backends 
          (mapcar #'company-mode/backend-with-yas company-backends)))

  ;; Code-comprehension server
  (use-package ycmd
    :ensure t
    :init (add-hook 'c++-mode-hook #'ycmd-mode)
    :config
    (set-variable 'ycmd-server-command '("python" "/usr/share/ycmd/ycmd"))
    (set-variable 'ycmd-global-config (expand-file-name "~/.emacs.d/ycm_conf.py"))
                                          ;    (set-variable 'ycmd-extra-conf-whitelist '("~/.emacs.d/ycm_conf.py"))

    (use-package company-ycmd
      :ensure t
      :init (company-ycmd-setup)
      :config (add-to-list 'company-backends (company-mode/backend-with-yas 'company-ycmd))))

  ;; On-the-fly syntax checking
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :init (global-flycheck-mode t))

  (use-package flycheck-ycmd
    :ensure t
    :commands (flycheck-ycmd-setup)
    :init (add-hook 'ycmd-mode-hook 'flycheck-ycmd-setup))

  ;; Show argument list in echo area
  (use-package eldoc
    :diminish eldoc-mode
    :init (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
#+END_SRC
  
