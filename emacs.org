-*- mode: org; fill-column: 78 -*-
#+TITLE: Emacs Configuration
#+AUTHOR: Simon Schnake
#+OPTIONS: toc:4 h:4

* Intro

This my emacs-config.

** Installation

Keep it simple. Clone as =~/.emacs.d= and start emacs

* Bootstrap Configuration
** Start Emacs Server
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC
** Benchmark Emacs startup

It's easier to optimize Emacs startup time when I have some data
available. Time code borrowed from [[https://github.com/jwiegley/dot-emacs/blob/master/init.el][John Wiegley's init.el]]

#+BEGIN_SRC emacs-lisp
  (defconst emacs-start-time (current-time))

  (defun display-startup-echo-area-message ())

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed
                      (float-time
                       (time-subtract (current-time) emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed))) t)
#+END_SRC

** Startup optimizations
*** Adjust GC in startup

Emacs garbage collector tries to use sane settings for an interactive
environment. It reduced throughput a bit. We can make Emacs start
faster by adjusting GC on startup and then fallback to interactive
settings.

#+BEGIN_SRC emacs-lisp
  (defvar original-gc-cons-threshold gc-cons-threshold)
  (defvar original-gc-cons-percentage gc-cons-percentage)

  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)

  (add-hook 'after-init-hook
            `(lambda () (setq gc-cons-threshold original-gc-cons-threshold
                              gc-cons-percentage original-gc-cons-percentage)) t)

#+END_SRC
*** Remove file handlers on startup

Make startup faster by removing all file handlers for the duration of
the startup. Should not affect initialization with my configuration.

#+BEGIN_SRC emacs-lisp
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda () (setq file-name-handler-alist file-name-handler-alist-old)) t)
#+END_SRC
** Harden TLS

#+BEGIN_SRC emacs-lisp
  (require 'tls)
  (setq tls-checktrust t)
#+END_SRC

** Use custom file
Use a specific custom file instead of saving things in =init.el= which
is used to bootstrap =org-babel=.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file t)
#+END_SRC

** Setup package management

Setup package.el manually to speed up startup. Adapted from
[[https://github.com/gilbertw1/emacs-literate-starter/blob/master/emacs.org#emacs-initialization][emacs-literate-starter]] and [[https://github.com/nilcons/emacs-use-package-fast][emacs-use-package-fast]].

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t))

    (eval-and-compile
      (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))

    ;; Add packages to info, required because we haven't run
    ;; package-initialize
    (with-eval-after-load "info"
      (info-initialize)
      (dolist (dir (directory-files package-user-dir))
        (let ((fdir (concat (file-name-as-directory package-user-dir) dir)))
          (unless (or (member dir '("." ".." "archives" "gnupg"))
                      (not (file-directory-p fdir))
                      (not (file-exists-p (concat (file-name-as-directory fdir) "dir"))))
            (add-to-list 'Info-directory-list fdir))))))
#+END_SRC

Initialize package.el and [[https://github.com/jwiegley/use-package][use-package]] only when compiling. But hook up
the initialization if =package-initialize= is called so that package.el
still works.

#+BEGIN_SRC emacs-lisp
  (defun vj--setup-package-el (&optional _)
    (require 'package)
    ;; Make package-installed-p only check the user package dir for org-mode
    ;; to make it skip the bundled org-mode.
    (defun vj--package-installed-p (orig-fn &rest args)
      (if (eq (car args) 'org)
          (if (file-expand-wildcards (concat package-user-dir "/org-[0-9]*")) t nil)
        (apply orig-fn args)))
    (advice-add 'package-installed-p :around #'vj--package-installed-p)

    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                        (not (gnutls-available-p))))
           (proto (if no-ssl "http" "https")))
      (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
      (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
      (setq package-archive-priorities '(("org" . 3)
                                         ("melpa" . 2)
                                         ("gnu" . 1)))))

  (advice-add #'package-initialize :before #'vj--setup-package-el)

  (eval-when-compile
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))

  ;; In init-file-debug mode, enable verbosity and statistics for use-package.
  (eval-and-compile
    (setq use-package-always-ensure t)
    (if init-file-debug
        (setq use-package-verbose t
              use-package-expand-minimally nil
              use-package-compute-statistics t)
      (setq use-package-verbose nil
            use-package-expand-minimally t
            use-package-compute-statistics nil)))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

When running from byte compiled file, setup autoload for =use-package=
so it can be used seamlessly. It also does package-initialize after
load to make sure =package.el= is also initialized.

#+BEGIN_SRC emacs-lisp
  (unless (featurep 'use-package)
    (require 'package)
    (autoload 'use-package "use-package")
    (eval-after-load "use-package" #'package-initialize))
#+END_SRC

Add [[https://github.com/emacsmirror/diminish][diminish]] and bind-key support to =use-package=

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
  (use-package bind-key)
  ; Requires here should speed up the boot
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* Global configuration
** Settings
*** Disable byte compile warnings
 Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
 if you would like to see any and all byte compiler warnings.

 #+BEGIN_SRC emacs-lisp
 (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
 #+END_SRC

*** Personal stuff
    Pretty self explanatory: just setting some personal details about who's using Emacs.
    #+begin_src emacs-lisp
    (setq user-full-name "Simon Schnake"
          user-mail-address "schnake.simon@gmail.com")
    #+end_src

*** Deactivation
    Deactivation of functionality I don't tend to use:
    - Backup files
    - Autosaving
    - Start-up message
    - Audible bell
    #+begin_src emacs-lisp
    (setq
      make-backup-files nil
      auto-save-default nil
      inhibit-startup-message t
      ring-bell-function 'ignore)
    #+end_src
*** Hide stuff
    Hide various elements of the Emacs GUI:
    - toolbar
    - tooltips
    - scrollbar
    - menubar
    - blinking cursor
    #+begin_src emacs-lisp
      (dolist
          (mode
           '(tool-bar-mode
             tooltip-mode
             scroll-bar-mode
             menu-bar-mode
             blink-cursor-mode))
        (funcall mode 0))
    #+end_src

*** UTF-8
    Configure Emacs for full UTF-8 compatability
    #+begin_src emacs-lisp
    (set-charset-priority 'unicode)
    (setq locale-coding-system   'utf-8)
    (set-terminal-coding-system  'utf-8)
    (set-keyboard-coding-system  'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system        'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
    #+end_src

*** Global ~:ensure~ for ~use-package~ statements
    ~use-package~ has an ~:ensure~ keyword which dictates whether packages are installed or not.
    As most of my ~use-package~ configurations are for external packages, I set this to always ensure.
    Then, in cases where I don't want this to be true, I simply set ~:ensure nil~
    #+begin_src emacs-lisp
    (setq use-package-always-ensure t)
    #+end_src

*** Discard customizations
    Emacs has a comprehensive customization system that allows configuration changes interactively.
    Personally, I opt to ensure all the configuration I use for my environment is fully declarative.
    As such, the following configuration sets the ~custom-file~ to be a random temporary file created each time Emacs starts.
    This means any customizations made interactively are discarded entirely.
    #+begin_src emacs-lisp
    (setq custom-file (make-temp-file ""))
    #+end_src

*** Just use 'y' or 'n' instead of 'yes' or 'no'
    You'll find ~yes-or-no~ prompts coming up in Emacs a lot.
    I'd much rather just type ~y~ or ~n~ than ~yes~ or ~no~ every time...
    #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    #+end_src

*** Follow symlinks in version control
    If there are any symlinks in version controlled repositories, follow them
    #+begin_src emacs-lisp
    (setq vc-follow-symlinks t)
    #+end_src

*** Configure FlySpell to use aspell
    I use ~aspell~, so this simply sets [[https://www.emacswiki.org/emacs/FlySpell][Flyspell]] to use it and passes a couple extra arguments
    #+begin_src emacs-lisp
    (setq ispell-program-name "aspell")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
    #+end_src

*** Copy&Paste inside terminal
Enable terminal emacs to copy and paste from system clipboard
Note: this uses =C-c= before the usual =C-w=, =M-w= and =C-y=
From: https://stackoverflow.com/questions/64360/how-to-copy-text-from-emacs-to-another-application-on-linux
you need to install xsel
#+BEGIN_SRC emacs-lisp
(defun my-copy-to-xclipboard(arg)
  (interactive "P")
  (cond
   ((not (use-region-p))
    (message "Nothing to yank to X-clipboard"))
   ((and (not (display-graphic-p))
         (/= 0 (shell-command-on-region
                (region-beginning) (region-end) "xsel -i -b")))
    (message "Error: Is program `xsel' installed?"))
   (t
    (when (display-graphic-p)
      (call-interactively 'clipboard-kill-ring-save))
    (message "Yanked region to X-clipboard")
    (when arg
      (kill-region  (region-beginning) (region-end)))
    (deactivate-mark))))

(defun my-cut-to-xclipboard()
  (interactive)
  (my-copy-to-xclipboard t))

(defun my-paste-from-xclipboard()
  (interactive)
  (if (display-graphic-p)
      (clipboard-yank)
    (insert (shell-command-to-string "xsel -o -b"))))

(global-set-key (kbd "C-c C-w") 'my-cut-to-xclipboard)
(global-set-key (kbd "C-c M-w") 'my-copy-to-xclipboard)
(global-set-key (kbd "C-c C-y") 'my-paste-from-xclipboard)
#+END_SRC
*** stretch-cursor
Non-nil means draw block cursor as wide as the glyph under it.
For example, if a block cursor is over a tab, it will be drawn as
wide as that tab on the display.
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC
*** Show-Paren-Mode
show-paren-mode allows one to see matching pairs of parentheses and
other characters.  When point is on the opening character of one of
the paired characters, the other is highlighted.  When the point is
after the closing character of one of the paired characters, the other
is highlighted.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Keyboard Shortcuts

#+BEGIN_SRC emacs-lisp
;; Global Keyboard Shortcuts
;; Set help to C-?
(global-set-key (kbd "C-?") 'help-command)
;; Set mark paragraph to M-?
(global-set-key (kbd "M-?") 'mark-paragraph)
;; Set backspace to C-h
(global-set-key (kbd "C-h") 'delete-backward-char)
;; Set backspace word to M-h
(global-set-key (kbd "M-h") 'backward-kill-word)
;; Use meta+tab word completion
(global-set-key (kbd "M-TAB") 'dabbrev-expand)
;; Easy undo key
(global-set-key (kbd "C-/") 'undo)
;; Comment or uncomment the region
(global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
#+END_SRC
** Appearance
   Configuration related to the appearance of Emacs
*** Current line highlighting
    Highlights the current line of the point.
    Just helps to visualise where you are in the buffer.
    I turn it on globally, but explicitly turn it off where I don't deem it necessary.
    #+begin_src emacs-lisp
    (global-hl-line-mode t)

    (make-variable-buffer-local 'global-hl-line-mode)
    (defvar my-ghd-modes '(
                           shell-mode-hook
                           git-commit-mode-hook
                           term-mode-hook
                          )
      "Modes to ensure global-hl-line-mode is disabled for.")
      (dolist (m my-ghd-modes)
	(add-hook m (lambda () (setq global-hl-line-mode nil))))
    #+end_src
*** Rainbow Delimiters
    So handy! This will colourize delimiters differently based on their depth.
    Really helps you not get burried when you're in deep.
    #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook
      (prog-mode . rainbow-delimiters-mode)
      (yaml-mode . rainbow-delimiters-mode))
    #+end_src
*** Theme
/Fashion First!/
Needs =xprop= to switch between dark and light gnome bar theme
#+begin_src emacs-lisp
  (use-package
    doom-themes
    :config
    ;; cleaning up
    (defadvice load-theme (before theme-dont-propagate activate)
      (mapc #'disable-theme custom-enabled-themes))
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-one-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))


  (defun set-dark-theme ()
    (interactive)
    (progn
      (defadvice load-theme (before theme-dont-propagate activate)
	(mapc #'disable-theme custom-enabled-themes))
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
      ;; may have their own settings.
      (load-theme 'doom-one t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)))

  (defun set-light-theme ()
    (interactive)
    (progn
      (defadvice load-theme (before theme-dont-propagate activate)
	(mapc #'disable-theme custom-enabled-themes))
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
      ;; may have their own settings.
      (load-theme 'doom-one-light t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)))
#+end_src

*** Modeline
We use telephone-line because, it's fast to load.
Config coming later
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :config
    (setq telephone-line-lhs
	  '((evil . (telephone-line-evil-tag-segment))
	    (accent . (telephone-line-vc-segment
		       telephone-line-erc-modified-channels-segment
		       telephone-line-process-segment))
	    (nil    . (telephone-line-minor-mode-segment
		       telephone-line-buffer-segment))))
    (setq telephone-line-rhs
	  '((nil    . (telephone-line-misc-info-segment))
	    (accent . (telephone-line-major-mode-segment))
	    (evil   . (telephone-line-airline-position-segment))))
    (telephone-line-mode 1))
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro for Powerline"
                    :height 125
                    :weight 'light
                    :width 'normal)
#+END_SRC
** OSX Setup
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'meta)
    (setq mac-right-option-modifier nil)
    (add-to-list 'default-frame-alist
		 '(ns-transparent-titlebar . t))
    (setq frame-title-format '("")))
#+END_SRC

* Major modes
** Python

- [X] switched to emacs-juptyer package from ob-ipython to ein ;)
- [ ] lsp-mode microsoft python
- [ ] switch from conda to pipenv (later...)

*** virtualenv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv)
#+END_SRC

*** jupyter

With Ubuntu 16.04 i had to use this configure setup 

./configure --with-mailutils --with-xml2 --with-imagemagick --with-modules --prefix=$HOME/.local/


This package offers jupyter kernel support for emacs org-mode. I take it as a
replacement for ob-ipython. More information at [[https://github.com/dzop/emacs-jupyter]]

The repl is used with =M-x jupyter-run-repl= and =M-x jupyter-connect-repl=. 

Example code block

#+BEGIN_SRC jupyter-python :async "yes" :session "py"
import numpy as np
np.ones((4,4)) + np.diag(np.ones(4))
#+END_SRC

*** ipython notebooks
#+BEGIN_SRC emacs-lisp
  (use-package ein)
#+END_SRC

** Julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode)
  (use-package julia-repl
   :commands julia-repl
   :hook (julia-mode . julia-repl-mode))

  (use-package ess)

#+END_SRC

Install =LanguageServer.jl=
#+BEGIN_SRC sh
julia> using Pkg
julia> Pkg.add("LanguageServer")
julia> Pkg.add("PackageCompiler")
julia> using PackageCompiler
julia> compile_package("LanguageServer")
#+END_SRC

** Org
*** General org-mode configuration

 #+BEGIN_SRC emacs-lisp
   (use-package org
     :config
     (setq org-confirm-babel-evaluate nil)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(latex . t)
	(ein . t)))

     (unbind-key "M-h" org-mode-map))

   (use-package org-bullets
     :commands (org-bullets-mode)
     :hook     (org-mode . (lambda () (org-bullets-mode 1))))

 #+END_SRC

** SLIME
#+BEGIN_SRC emacs-lisp 
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (slime-setup))
#+END_SRC

** Go-Lang

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :init
    (progn
      (setq gofmt-command "goimports")
      (add-hook 'before-save-hook 'gofmt-before-save))
    :bind (("M-." . godef-jump)
	   ("M-," . pop-tag-mark))
    )



  (use-package go-eldoc
    :ensure t
    :defer
    :init
    (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC

* Minor Modes
** Flymake
 #+BEGIN_SRC emacs-lisp
   (use-package flymake
     :diminish)

   (use-package flymake-go)

 #+END_SRC 
** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode t)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-wrap t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    ;; Show #/total when scrolling buffers
    (setq ivy-count-format "%d/%d "))

  (use-package swiper
    :defer 1
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :diminish
    :defer 1
    :bind
    (("C-;" . avy-goto-word-1)
     ("C-'" . avy-goto-char-2)))
#+END_SRC

** [[https://github.com/magit/magit][Magit]]

   The one true Git porcelain!
   Truely a joy to use - it surfaces the power of Git in such a fluent manner.
   Anyone using Git and Emacs *needs* Magit in their life!
   #+begin_src emacs-lisp
     (use-package
      magit
      :defer
      :bind ("C-c m" . magit-status))
      ;;:init
      ;;(setq magit-completing-read-function 'ivy-completing-read))
   #+end_src

** [[https://github.com/Fuco1/smartparens][Smartparens]]
   Brilliant automatic balancing of pairs. Makes for a really nice experience when typing in any language - programming or not.
   Just check out some of the gifs in the project's README.
   #+begin_src emacs-lisp
     (use-package smartparens
       :diminish smartparens-mode
       :config
       (smartparens-global-mode)
       (show-smartparens-global-mode t))
   #+end_src

** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package
    yasnippet
    :defer 3
    :diminish yas-minor-mode
    :config (yas-global-mode t))

  (use-package
    yasnippet-snippets
    :defer 4
    :after yasnippet)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :diminish company-mode
      :config
      ;; Zero delay when pressing tab
      (setq company-idle-delay 0.3)
      (global-company-mode t)
      ;; remove unused backends
      (setq company-backends (delete 'company-semantic company-backends))
      (setq company-backends (delete 'company-eclim company-backends))
      (setq company-backends (delete 'company-xcode company-backends))
      (setq company-backends (delete 'company-clang company-backends))
      (setq company-backends (delete 'company-bbdb company-backends))
      (setq company-backends (delete 'company-oddmuse company-backends))
    )
  
  (use-package company-quickhelp          ; Documentation popups for Company
    :defer t
    :init (add-hook 'global-company-mode-hook #'company-quickhelp-mode))

  (use-package company-go
    :defer t
    :init
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-go)))

#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]
   Having multiple cursors can be very powerful.
   This allows you to perform simultaneous actions at multiple positions within the buffer.
   This can be based on arbitrary regions (n amount of lines, as chosen manually), for each ocurrance of a pattern/selection, etc.
   #+begin_src emacs-lisp
   (use-package multiple-cursors
     :bind
     ("C->" . mc/mark-next-like-this)
     ("C-<" . mc/mark-previous-like-this))
   
   #+end_src

** [[https://github.com/purcell/exec-path-from-shell][Set exec/man PATH from shell]]
   When looking for executables/man-pages, Emacs will inherit these properties from the OS environment.
   This package provides the ability to do so from the user's shell, where they may have some more complex logic to determine such paths.
   #+begin_src emacs-lisp
   (use-package exec-path-from-shell
     :config
     (setq exec-path-from-shell-check-startup-files nil)
     (exec-path-from-shell-initialize))
   #+end_src

** [[https://github.com/emacsfodder/move-text][MoveText]]
   Easily move text up and down.
   I've tied this into a little hydra for more natural repeated movement.
   #+begin_src emacs-lisp
   (use-package move-text
     :bind ("C-c t" . hydra-move-text/body)
     :config
     ;; Move Text
     (defhydra hydra-move-text ()
       "Move text"
       ("k" move-text-up "Up")
       ("j" move-text-down "Down")
       ("q" nil "Quit" :color blue)))
   #+end_src
** Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :defer 3
    :diminish)
#+END_SRC

** multi-term
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :bind (("C-x m" . multi-term-next)
	   ("C-x M" . multi-term))
    :config '(setq multi-term-program "/usr/bin/zsh"))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer 10
  :config
  (progn
    (setq which-key-popup-type 'side-window) ;Default
    ;; (setq which-key-popup-type 'minibuffer)
    (setq which-key-compute-remaps t) ;Show correct descriptions for remapped keys
    (setq which-key-allow-multiple-replacements t) ;Default = nil
    (which-key-mode 1)))
#+END_SRC

** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
	       :commands rainbow-mode)
#+END_SRC
* Local Configuration

#+BEGIN_SRC emacs-lisp
  (let ((localel "~/.emacs.d/local.el"))
    (if (file-exists-p localel)
        (load (file-name-sans-extension localel))))
#+END_SRC


